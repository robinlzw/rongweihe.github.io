<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅谈程序的内存布局</title>
      <link href="/2020/04/11/qian-tan-cheng-xu-de-nei-cun-bu-ju/"/>
      <url>/2020/04/11/qian-tan-cheng-xu-de-nei-cun-bu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><blockquote><p><strong>1、什么是 User space 与 Kernel space？</strong></p><p><strong>2、Linux 下一个进程里典型的内存布局是怎样的？</strong></p><p><strong>3、什么是栈区？</strong></p><p><strong>4、什么是堆区？</strong></p><p><strong>5、malloc 算法是如何实现的？</strong></p><p><strong>6、Linux 系统下，有几种堆空间分配方式？</strong></p></blockquote><p><strong>上面几个问题，点进来的老铁，心里有答案吗？如果没有，跟我一起来探究一下吧。</strong></p><h2 id="1、User-space-与-Kernel-space"><a href="#1、User-space-与-Kernel-space" class="headerlink" title="1、User space 与 Kernel space"></a><strong>1、User space 与 Kernel space</strong></h2><p>现代的应用程序都运行在一个内存空间里，在 32 位系统中，这个内存空间拥有 4GB （2 的 32 次方）的寻址能力。</p><p>尽管现在的内存空间都号称是平坦的，但实际上内存仍然在不同的地址区间有着不同的地位，例如，大多数操作系统都会将 4GB 的内存空间一部分挪给内核使用，应用程序无法直接访问这一段内存，这一部分内存地址被称为 内核空间。</p><blockquote><p>Windows 在默认的情况下会将高地址的 2GB 空间分配给内核（也可以配置 1GB）。<br>Linux 默认情况下将高地址的 1GB 空间分配给内核。</p></blockquote><p>用户使用的剩下的 2GB 或 3GB 的内存空间称为用户空间。</p><p><strong>为什么要区分内核空间和用户空间？</strong></p><p>大致有三点因素：</p><p>第一点：操作系统的数据都是存放于系统空间的，用户进程的数据是存放于用户空间的；</p><p>第二点：分开来存放，就让系统的数据和用户的数据互不干扰，保证系统的稳定性，并且管理上很方便；</p><p>第三点：也是重要的一点，将用户的数据和系统的数据隔离开，就可以对两部分的数据的访问进行控制。这样就可以确保用户程序不能随便操作系统的数据，这样防止用户程序误操作或者是恶意破坏系统。</p><p>下面这一张图，比较形象的解释了 User space 与 Kernel space 的区别</p><p><img src="https://pic2.zhimg.com/80/v2-18fabec59a3f38e36a371caa5d1093a9_1440w.jpg" alt="User space VS Kernel space"></p><p>简单说，Kernel space 是 Linux 内核的运行空间，User space 是用户程序的运行空间。为了安全，它们是隔离的，即使用户的程序崩溃了，内核也不受影响。</p><p>Kernel space 可以执行任意命令，调用系统的一切资源；</p><p>相对来说，User space 执行的是较为简单的运算，执行的运算不影响其他程序的执行，并且不能直接调用系统资源，必须通过系统接口（又称 system call），才能向内核发出指令。</p><blockquote><p>这里补充下知乎网友@风云评论：<br>其实，在用户空间，几乎所有内核资源在用户空间都是可以访问的（必须有相应的权限），即使是操作系统内核的大脑（调度程序）。</p></blockquote><p>在用户空间里，也有许多地址区间有特权的地位，一般来讲，应用程序使用的内存空间里有如下“默认”的区域。</p><blockquote><p><strong>栈：</strong> 栈用于维护函数调用的上下文，离开了栈，函数调用就无法实现，栈通常在用户空间的最高地址处分配，通常有数兆字节的大小。</p><p><strong>堆：</strong> 堆是用来容纳应用程序动态分配的内存区域，当程序使用 malloc 或者 new 分配内存的时候，得到的内存会来自堆里。堆通常存在栈的下方（低地址方向），在某些时候，堆也可能没有固定统一的存储区域。堆一般比栈大很多，可以有几十至数百兆字节的容量。</p><p><strong>可执行文件映像：</strong> 存储着可执行文件在内存里的映像，由装载器在装载时将可执行文件的内存读取或映射到这里。</p><p><strong>保留区：</strong> 保留区并不是一个单一的内存区域，而是对内存中受到保护而禁止访问的内存区域的总称：例如大多数操作系统中，极小的地址通常都是不允许访问的，如 NULL，C 语言将无效指针赋值为 0 也是这个考虑。</p><p><strong>动态链接库映射区：</strong> 这个区域用于映射装载的动态链接库。在 Linux 下，如果可执行文件依赖其它共享库，那么系统就会为它在从 0x40000000 开始的地址分配相应的空间，并将共享库载入该空间。<br>剩下的还有以下几部份组成：<br>（1）代码段<br>（2）初始化数据段（数据段）<br>（3）未初始化数据段（BSS 段）</p></blockquote><p>下图是 Linux 下一个进程里典型的内存布局</p><p><img src="https://pic1.zhimg.com/80/v2-d208651aa87138e6291d789b3a880444_1440w.jpg" alt="Linux 下一个进程里典型的内存布局"></p><p>图中的箭头，标明了几个大小可变的尺寸增长的方向，在这里，可以清晰地看出</p><blockquote><p><strong>栈是由高地址向低地址增长。</strong><br><strong>堆是由低地址向高地址增长。</strong></p></blockquote><p>当栈或堆现有的大小不够用的时候，它将按照图中的增长方向扩大自身的尺寸，直到预留的空间被用完为止。</p><p>在讲堆和栈之前，我们先来看一下代码段，初始化数据段和未初始化数据段。</p><h2 id="2、代码段"><a href="#2、代码段" class="headerlink" title="2、代码段"></a><strong>2、代码段</strong></h2><p>代码段中存放可执行的指令，在内存中，为了保证不会因为堆栈溢出被覆盖，将其放在了堆栈段下面（从上图可以看出）。通常来讲代码段是共享的，这样多次反复执行的指令只需要在内存中驻留一个副本即可，比如 C 编译器，文本编辑器等。代码段一般是只读的，程序执行时不能随意更改指令，也是为了进行隔离保护。</p><h2 id="3、初始化数据段"><a href="#3、初始化数据段" class="headerlink" title="3、初始化数据段"></a><strong>3、初始化数据段</strong></h2><p>初始化数据段有时就称之为数据段。数据段是一个程序虚拟地址空间的一部分，包括一全局变量和静态变量，这些变量在编程时就已经被初始化。数据段是可以修改的，不然程序运行时变量就无法改变了，这一点和代码段不同。</p><p>数据段可以细分为初始化只读区和初始化读写区。这一点和编程中的一些特殊变量吻合。比如全局变量 int global n = 1就被放在了初始化读写区，因为 global 是可以修改的。而 const int m = 2 就会被放在只读区，很明显，m 是不能修改的。</p><h2 id="4、未初始化数据段"><a href="#4、未初始化数据段" class="headerlink" title="4、未初始化数据段"></a><strong>4、未初始化数据段</strong></h2><p>未初始化数据段有时称之为 BSS 段，BSS 是英文 Block Started by Symbol 的简称，BSS 段属于静态内存分配。存放在这里的数据都由内核初始化为 0。未初始化数据段从数据段的末尾开始，存放有全部的全局变量和静态变量并被，默认初始化为 0，或者代码中没有显式初始化。比如 static int i; 或者全局 int j; 都会被放到BSS段。</p><h2 id="5、栈"><a href="#5、栈" class="headerlink" title="5、栈"></a><strong>5、栈</strong></h2><p> 栈 (stack) 是现代计算机程序里最为重要的概念之一，几乎每一个程序都使用了栈，没有栈就没有函数，没有局部变量，也就没有我们如今能够看见的所有的计算机语言。在解释为什么栈会如此重要之前，让我们来先了解一下传统的栈的定义：</p><p> 在经典的计算机科学中，栈被定义为一个特殊的容器，用户可以将数据压入栈中(入栈,push，也可以将已经压入栈中的数据弹出(出栈, pop)，但栈这个容器必须遵守一条规则：先入栈的数据后出栈(First In Last Out, FIFO)，多多少少像叠成一叠的书：先叠上去的书在最下面：因此要最后才能取出。</p><p> 在计算机系统中，栈则是一个具有以上属性的动态内存区域。程序可以将数据压入栈中,也可以将数据从栈顶弹出。压栈操作使得栈增大,而弹出操作使栈减小。</p><p> 在经典的操作系统里，栈总是向下增长的。</p><p><strong>在i386下，栈顶由称为 esp 的寄存器进行定位。压栈的操作使栈顶的地址减小，弹出的操作使栈顶地址增大。</strong></p><p><img src="https://pic1.zhimg.com/80/v2-c80a937e5d09461436c68d3357c46fc4_1440w.jpg" alt="栈的实例"></p><p>这里栈底的地址是 0xbffff，而 esp 寄存器标明了栈顶，地址为 0xbifff4。</p><p>在栈上压入数据会导致 esp 减小，弹出数据使得 esp 增大。</p><p>栈在程序运行中具有举足轻重的地位。最重要的，栈保存了一个函数调用所需要的维护信息，这常常被称为堆栈帧(Stack Frame)或活动记录(Activate Record)，堆栈帧一般包括如下几方面内容：</p><blockquote><p><strong>1、函数的返回地址和参数。</strong><br><strong>2、临时变量:包括函数的非静态局部变量以及编译器自动生成的其他临时变量。</strong><br><strong>3、保存的上下文:包括在函数调用前后需要保持不变的寄存器。</strong></p></blockquote><h2 id="6、堆"><a href="#6、堆" class="headerlink" title="6、堆"></a><strong>6、堆</strong></h2><p>相对于栈，堆这片内存面临着一个稍微复杂的行为模式：在任意时刻，程序可能发出请求，要么申请一段内存，要么释放一段已经申请过的内存，而且申请的大小从几个字节到数 GB 都是有可能的，我们不能假设程序会一次申请多少堆空间，因此，堆的管理显得较为复杂。</p><p><strong>为什么需要堆？</strong></p><blockquote><p>光有栈，对于面向过程的程序设计还远远不够，因为栈上的数据在函数返回的时候就会被释放掉，所以无法将数据传递至函数外部。而全局变量没有办法动态地产生，只能在编译的时候定义，有很多情况下缺乏表现力，在这种情况下，堆（Heap）是一种唯一的选择。</p></blockquote><p>堆是一款巨大的内存空间，常常占据整个虚拟空间的绝大部分，在这片空间里，程序可以请求一块连续的内存，并自由地使用，这块内存在程序主动放弃之前都活一直保持有效，下面是一个申请堆空间最简单的例子：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第 3 行用 malloc 申请了 233 个字节的空间之后，程序可以自由地使用这 233个字节，直到程序用free函数释放它。</p><p><strong>那么 malloc 到底是怎么实现的呢？</strong></p><p>有一种做法是，把进程的内存管理交给操作系统内核去做，既然内核管理着进程的地址空间，那么如果它提供一个系统调用，可以让程序使用这个系统调用申请内存，不就可以了吗？</p><p>当然这是一种理论上可行的做法，但实际上这样做的性能比较差，原因在于每次程序申请或者释放堆空间都需要进行系统调用。</p><p>我们知道系统调用的性能开销是很大的，当程序对堆的操作比较频繁时，这样做的结果是会严重影响程序的性能的。</p><p><strong>比较好的做法就是：程序向操作系统申请一块适当大小的堆空间，然后由程序自己管理这块空间，而具体来讲，管理着堆空间分配的往往是程序的运行库。</strong></p><p>运行库相当于是向操作系统 <strong>“批发”</strong> 了一块较大的堆空间，然后 “零售” 给程序用。</p><p>当全部“售完”或程序有大量的内存需求时，再根据实际需求向操作系统“进货”。</p><p>当然运行库在向程序零售堆空间时，必须管理它批发来的堆空间，不能把同一块地址出售两次，导致地址的冲突。</p><h2 id="7、Linux-进程堆管理"><a href="#7、Linux-进程堆管理" class="headerlink" title="7、Linux 进程堆管理"></a><strong>7、Linux 进程堆管理</strong></h2><p>由第一节可知，进程的地址空间中，除了可执行文件，共享库和栈之外，剩余的未分配的空间都可以用来作为堆空间。</p><p>Linux 系统下，提供两种堆空间分配方式，两个系统调用：brk() 系统调用 和 mmap() 系统调用</p><p>这两种方式分配的都是虚拟内存，没有分配物理内存。在第一次访问已分配的虚拟地址空间的时候，发生缺页中断，操作系统负责分配物理内存，然后建立虚拟内存和物理内存之间的映射关系。</p><p>在标准 C 库中，提供了malloc/free函数分配释放内存，这两个函数底层是由 brk，mmap，munmap 这些系统调用实现的。</p><h3 id="brk-系统调用"><a href="#brk-系统调用" class="headerlink" title="brk() 系统调用"></a><strong>brk() 系统调用</strong></h3><blockquote><p>C 语言形式声明：int brk() {void* end_data_segment;}<br>brk() 的作用实际上就是设置进程数据段的结束地址，即它可以扩大或者缩小数据段（Linux 下数据段和 BBS 合并在一起统称数据段）。<br>如果我们将数据段的结束地址向高地址移动，那么扩大的那部分空间就可以被我们使用，把这块空间拿过来使用作为堆空间是最常见的做法。</p></blockquote><h3 id="mmap-系统调用"><a href="#mmap-系统调用" class="headerlink" title="mmap() 系统调用"></a><strong>mmap() 系统调用</strong></h3><blockquote><p>和 Windows 系统下的 VirtualAlloc 很相似，它的作用就是向操作系统申请一段虚拟地址空间，（堆和栈中间，称为文件映射区域的地方）这块虚拟地址空间可以映射到某个文件。<br>glibc 的 malloc 函数是这样处理用户的空间请求的：对于小于 128KB 的请求来说，它会在现有的堆空间里面，按照堆分配算法为它分配一块空间并返回；对于大于128KB 的请求来说，它会使用 mmap() 函数为它分配一块匿名空间，然后在这个匿名空间中为用户分配空间。</p></blockquote><p>声明如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span><span class="token operator">*</span> mmap<span class="token punctuation">{</span>    <span class="token keyword">void</span><span class="token operator">*</span> start<span class="token punctuation">;</span>    size_t length<span class="token punctuation">;</span>    <span class="token keyword">int</span> prot<span class="token punctuation">;</span>    <span class="token keyword">int</span> flags<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    off_t offset<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>mmap 前两个参数分别用于指定需要申请的空间的起始地址和长度，如果起始地址设置 0，那么 Linux 系统会自动挑选合适的起始地址。<br>prot/flags 参数：用于设置申请的空间的权限（可读，可写，可执行）以及映射类型（文件映射，匿名空间等）。<br>最后两个参数用于文件映射时指定的文件描述符和文件偏移的。</p></blockquote><p>了解了 Linux 系统对于堆的管理之后，可以再来详细这么一个问题，那就是 malloc 到底一次能够申请的最大空间是多少？</p><p>为了回答这个问题，就不得不再回头仔细研究一下之前的图一。我们可以看到在有共享库的情况下，留给堆可以用的空间还有两处。第一处就是从 BSS 段结束到 0x40 000 000 即大约 1GB 不到的空间；</p><p>第二处是从共享库到栈的这块空间，大约是 2GB 不到。这两块空间大小都取决于栈、共享库的大小和数量。</p><p>于是可以估算到 malloc 最大的申请空间大约是 2GB 不到。（Linux 内核 2.4 版本）。</p><p>还有其它诸多因素会影响 malloc 的最大空间大小，比如系统的资源限制（ulimit），物理内存和交换空间的总和等。mmap 申请匿名空间时，系统会为它在内存或交换空间中预留地址，但是申请的空间大小不能超过空闲内存+空闲交换空间的总和。</p><h3 id="堆分配算法"><a href="#堆分配算法" class="headerlink" title="堆分配算法"></a>堆分配算法</h3><blockquote><p>1、空闲链表法（即调用 malloc 分配）：<br>就是把堆中各个空闲的块按照链表的方式连接起来，当用户请求一块空间的时候，可以遍历整个列表，直到找到合适大小的块并且将它拆分；当用户释放空间的时候将它合并到空闲链表中。<br>空闲链表是这样一种结构，在堆里的每一个空闲空间的开头(或结尾)有一个头 (header)，头结构里记录了上一个 (prev) 和下一个 (next) 空闲块的地址，也就是说，所有的空闲块形成了一个链表。如图所示。</p></blockquote><p><img src="https://pic3.zhimg.com/80/v2-2ec61852d2b6fccaf11fd92923a2d81e_1440w.jpg" alt="空闲链表法"></p><p>具体实现方案：</p><blockquote><p>1）malloc 函数的实质是它有一个将可用的内存块连接为一个长长的列表的所谓空闲链表。</p><p>2）调用 malloc（）函数时，它沿着连接表寻找一个大到足以满足用户请求所需要的内存块。然后，将该内存块一分为二（一块的大小与用户申请的大小相等，另一块的大小就是剩下来的字节）。接下来，将分配给用户的那块内存存储区域传给用户，并将剩下的那块（如果有的话）返回到连接表上。</p><p>3）调用 free 函数时，它将用户释放的内存块连接到空闲链表上。</p><p>4）到最后，空闲链会被切成很多的小内存片段，如果这时用户申请一个大的内存片段， 那么空闲链表上可能没有可以满足用户要求的片段了。于是，malloc() 函数请求延时，并开始在空闲链表上检查各内存片段，对它们进行内存整理，将相邻的小空闲块合并成较大的内存块。</p></blockquote><p>2、位图法</p><blockquote><p>针对空闲链表的弊端，另一种分配方式显得更加稳健。这种方式称为位围(Bitmap)，其核心思想是将整个堆划分为大量的块(block)，每个块的大小相同。</p><p>当用户请求内存的时候，总是分配整数个块的空间给用户，第一个块我们称为已分配区域的头(Head)，其余的称为己分配区域的主体(Body)，而我们可以使用一个整数数组来记录块的使用情况，由于每个块只有头/主体/空闲三种状态，因此仅仅需要两位即可表示一个块，因此称为位图。</p></blockquote><p>3、对象池</p><blockquote><p>还有一种方法是对象池，也是把堆空间分成了大小相等的一些块，它是认为某些场合每次分配的空间都相等，所以每次就直接返回一个块的大小，它的管理方法可以是链表也可以是位图。因为不用每次查找合适的大小的内存返回，所以效率很高。</p></blockquote><p>实际上很多现实应用中，堆的分配算法往往是采取多种算法复合而成的。</p><p>比如对于 glibc 来说，它对于小于 64 字节的空间申请是采用类似于对象池的方法；</p><p>而对于大于 512 字节的空间申请采用的是最佳适配算法；对于大于 64 字节而小于 512 字节的，它会根据情况采取上述方法中的最佳折中策略；对于大于 128KB 的申请，它会使用mmap 机制直接向操作系统申请空间。</p><blockquote><p>参考资料：</p><p>《程序员的自我修养》；《Linux 内核设计与实现》；《C primer plus 第6版中文版》。</p></blockquote><br/><blockquote><ul><li>本文已收录至我的 GitHub 程序员成长系列【MoreThanCode】 ，欢迎 star：<a href="https://github.com/rongweihe/MoreThanCode" target="_blank" rel="noopener">https://github.com/rongweihe/MoreThanCode</a></li><li><strong>个人公众号</strong> ：herongwei，<strong>个人独立域名博客</strong>：herongwei.com，坚持原创输出，下方扫码关注，2020，与您共同成长！</li></ul></blockquote><div align="center"> <img src="https://i.loli.net/2020/04/11/GquzYyQ5loDCALM.png"width="500"/> </div><br><p>非常感谢各位老铁能<strong>看到这里</strong>，如果觉得本篇文章写得不错，觉得 <strong>「herongwei」是一个认真的仔</strong> 的话，<strong>求点赞，求关注，求分享，求留言哦！</strong></p><p>创作不易，各位老铁的支持和认可，就是我创作的最大动力，我们下篇文章在见！</p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 底层知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最新！多交的税可以退，同学，你今天退税了吗？</title>
      <link href="/2020/04/11/zui-xin-duo-jiao-de-shui-ke-yi-tui-tong-xue-ni-jin-tian-tui-shui-liao-ma/"/>
      <url>/2020/04/11/zui-xin-duo-jiao-de-shui-ke-yi-tui-tong-xue-ni-jin-tian-tui-shui-liao-ma/</url>
      
        <content type="html"><![CDATA[<p>原文首发于知乎：<a href="https://zhuanlan.zhihu.com/p/100766337" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/100766337</a></p><h5 id="4-10-号-更新"><a href="#4-10-号-更新" class="headerlink" title="4.10 号 更新"></a>4.10 号 更新</h5><p>1、有同学留言，已经收到退税了。</p><p>2、部分地区陆续开放申报了，建议大家不要着急。</p><p>3、大家耐心一点，该是你的一分不会少，退税这个事多退少补，建议大家在白天上班时间去APP上看看，毕竟相关公务人员也是正常上班（记得申报之前先登录！）</p><p>4、提前完善个人信息，包括绑定个人银行卡。</p><p>PS：我个人的申请已经到国库处理中这个状态了（已经处理快一个礼拜了，还在处理中。。嘤嘤嘤）。</p><h2 id="申报步骤：不要点申诉！不要着急，跟着我一步步来"><a href="#申报步骤：不要点申诉！不要着急，跟着我一步步来" class="headerlink" title="申报步骤：不要点申诉！不要着急，跟着我一步步来"></a>申报步骤：不要点<strong>申诉！</strong>不要着急，跟着我一步步来</h2><h3 id="1、第一步：下载-“个人所得税”-APP"><a href="#1、第一步：下载-“个人所得税”-APP" class="headerlink" title="1、第一步：下载 “个人所得税” APP"></a>1、第一步：下载 “个人所得税” APP</h3><div align="center"> <img src="https://pic2.zhimg.com/80/v2-257b3a17c68f54fcdc246962a7ac7299_1440w.jpg"width="400"/> </div><br><p>注册，登录，填报相应信息。</p><h3 id="2、确保-APP-更新到最新版"><a href="#2、确保-APP-更新到最新版" class="headerlink" title="2、确保 APP 更新到最新版"></a>2、确保 APP 更新到最新版</h3><p>进入首页，往下拉，看到常用业务的“收入纳税明细查询”，对，就是箭头指向那个地方，不要犹豫，点进去！</p><div align="center"> <img src="https://pic3.zhimg.com/80/v2-6b3690197227e337ed76c5fea465de12_1440w.jpg"width="400"/> </div><br><h3 id="3、不要太鸡冻，继续点进去"><a href="#3、不要太鸡冻，继续点进去" class="headerlink" title="3、不要太鸡冻，继续点进去"></a>3、不要太鸡冻，继续点进去</h3><p>进入收入明细查询之后，我们选择税款所属年度，也就是查询 2019 的税款。</p><div align="center"> <img src="https://pic1.zhimg.com/80/v2-2e536001a676cccd37b5fb73156a53b0_1440w.jpg"width="400"/> </div><br><p>选中自己有关的项目，就会看到你这过去的一年缴纳的所有税费，如果不清楚具体哪些项目有关，可以全选。</p><p><strong>激动的心，颤抖的手，注意握紧你的手机，点击查询按钮！</strong></p><div align="center"> <img src="https://i.loli.net/2020/04/11/25ZAbtVS7TiWRBF.jpg"width="400"/> </div><br><p>嚯，不查不知道，一查还真是一笔不小的钱哈，此刻相信你会跟我一样，脑子里快速地联想到，那要是都能退的话，我扁扁的钱包岂不是又可以充满自信的鼓起来了？过年的压岁钱都不用发愁了，想到这，还真是有点小激动。</p><h3 id="——分割线——"><a href="#——分割线——" class="headerlink" title="——分割线——"></a>——分割线——</h3><p>（下面是个人BB时间，不想看的直接拉到最后面帮忙点个赞哦，感谢老铁支持哦）</p><p>在国内，很多大学生、研究僧作为在校生，一般都会跟着导师做项目，这其中，你跟导师并没有签署劳动合同。</p><p>也就是说，你每个月到手的薪资实际是以劳务所得费发放，只要你好好跟着导师做项目，努力工作，表现好一点，一般都会给你发薪资。</p><p>一般来说，理工科导师的项目经费比较多，动辄几十万，上百万，导师经常会找一些研究生来和自己一起做项目，然后分给研究生一部分经费，也就是劳务所得费。</p><p>研究生能够得到的经费数量往往与导师项目的大小、多少有关，也跟导师的性格有比较大的关系，有的导师出手比较大方，学生得到的经费也就比较多一些。而且还会经常请学生吃吃饭，搞个团建啥的。</p><p>而有的导师比较节俭，对科研经费抠得很紧，每个月就给学生发那么几百块，象征下，因而学生拿到的经费就会少一些。</p><p>但是，无论发的多还是发的少，只要你税前薪资超过 800，就要扣税，看到这，是不是感觉有点心疼？</p><div align="center"> <img src="https://pic3.zhimg.com/80/v2-91e602809c8cb3b4a30393473562fcfa_1440w.jpg"width="400"/> </div><br><p>按照国家有关规定，劳务报酬个人所得税的免征额是 800元，800 元以内的部分免税,超过 800 元以上的部分，按照 20 %的比例税率交税。</p><p>举个栗子：导师每月给你发 1200，1200-800=400,超出这 400 按照 20%比例交税也就是 80，所以你实际到手 1200-80=1120。</p><p>因此，可以这么说，每月工资越多，扣的税也越多。</p><p>但是，12 月中旬，人民日报发了一条微博：</p><p><img src="https://pic3.zhimg.com/80/v2-acdb2541649263c9ddd0b0ec9d15c08a_1440w.jpg" alt="人民日报微博"></p><p>近日，国家税务总局公布关于办理2019年度个人所得税综合所得汇算清缴的公告（征求意见稿）向社会征求意见。我国首个个税汇算清缴将于2020年3月启动，年收入不超过12万可免个税汇算清缴。</p><h2 id="7种情况个税可申请退税："><a href="#7种情况个税可申请退税：" class="headerlink" title="7种情况个税可申请退税："></a>7种情况个税可申请退税：</h2><p><img src="https://pic2.zhimg.com/80/v2-2e71b867209762b6eccde0419b1fb0d1_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-5f0c659247e7ca3b8cf4a5e42d3509af_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-c7a1180fdb00906e63b6655ad9db51bb_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-e5d89bdb470febd50c2414c57a421fc8_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-28d0ef98ff807a30dcfa6afc64fd2b30_1440w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-0babacd0ad8e0525845e22b2e1d54d7e_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-2939008a249fb2f3d3d6bf57cbd90014_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-347b3e0f894439d5f2e7015fb4817bd7_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-5afcd4a10f75785a48d9fed739c0b5e8_1440w.jpg" alt="img"></p><p>挑重点的说，其中第一种情况和第四种情况分别是：</p><p><strong>（1）2019 年度综合所得年收入额不足 6 万元,但平时预缴过个人所得税的。</strong></p><p>举例：小明 1 月领取工资 1 万元、个人缴付“三险一金” 2000元,假设没有专项附加扣除,预缴个税 90 元;其他月份每月工资4000 元,无须预缴个税。全年看,因年收入额不足 6 万元无须缴税,可申请退还预缴的 90 元。</p><p><strong>（2）没有任职受雇单位，仅取得劳务报酬、稿酬、特许权使用费所得，需通过年度汇算办理各种税前扣除的。</strong></p><p>大学生，研究僧应该就属于这种情况。</p><p>所以，按照上面说的两种情况，只要你是在校学生，跟导师做课题、项目，通过劳务所得费获得的费用，所扣的税也是可以退税的！</p><p>对！你没有听错！就是有这种操作！而是完全是合法的！</p><p>也就是说，年度汇算清缴时候你可以直接申请退费！！！</p><p>一下子仿佛就有了过年的压岁钱，开心么？</p><p><img src="https://pic2.zhimg.com/v2-efebed963f5174365a00e107ab25ecf1_b.jpg" alt="开心"></p><br/><blockquote><ul><li>本文已收录至我的 GitHub 程序员成长系列【MoreThanCode】 ，欢迎 star：<a href="https://github.com/rongweihe/MoreThanCode" target="_blank" rel="noopener">https://github.com/rongweihe/MoreThanCode</a></li><li><strong>个人公众号</strong> ：herongwei，<strong>个人独立域名博客</strong>：herongwei.com，坚持原创输出，下方扫码关注，2020，与您共同成长！</li></ul></blockquote><div align="center"> <img src="https://i.loli.net/2020/04/11/GquzYyQ5loDCALM.png"width="500"/> </div><br><p>非常感谢各位老铁能 <strong>看到这里</strong>，如果觉得本篇文章写得不错，觉得 <strong>「herongwei」是一个认真的仔</strong> 的话，<strong>求点赞，求关注，求分享，求留言哦！</strong></p><p>创作不易，各位老铁的支持和认可，就是我创作的最大动力，我们下篇文章在见！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小狗钱钱》读书笔记</title>
      <link href="/2020/04/11/xiao-gou-qian-qian-du-shu-bi-ji/"/>
      <url>/2020/04/11/xiao-gou-qian-qian-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>今天分享一本有趣的理财入门书《小狗钱钱》，记录一下自己的感想。</p><div align="center"> <img src="https://i.loli.net/2019/01/12/5c39e3745a285.png"width="500"/> </div><br><h2 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h2><p>《小狗钱钱》讲述的是一个童话故事：有一天，吉娅发现一只受伤的猎狗，并把它带回了家。可是，有谁会想到，这只普通的四脚动物居然会说话，是一个难得的理财天才呢？</p><p>吉娅和小狗成为了朋友，并从它那里得知，原来所有的愿望都是可以实现的。从这个童话故事里可以了解一些金钱的秘密和真相，以及投资、理财的办法。这个故事描述了在实施这些方法的过程中可能遇到的挑战，并且说明了一些令人难以置信的结果。</p><h2 id="二、作者简介"><a href="#二、作者简介" class="headerlink" title="二、作者简介"></a>二、作者简介</h2><blockquote><p>博多·舍费尔（Bodo Schafer）是位畅销书作家。他萃取个人经历中的精华，总结出一套投资理念。借着这套理念的帮助，欧洲成千上万的人在个人财务问题上取得了巨大的进步。</p><p>在获得财务自由之前博多也曾经历过长期的奋斗。他 16 岁时远赴美国求学，高中毕业后进入大学主修法律，之后在不同公司中担任各种重要职务。26 岁时博多陷入严重的个人财务危机，然而凭借坚强的意志和正确的投资理念，他最终摆脱了债务，获得了成功。</p><p>博多决心把他的理财知识传播给更多的人。他的著作被翻译成十几种语言在全球各地广为传播，创下了 110 周稳居德国图书排行榜首位的记录。他每年在欧洲各地的巡回演讲吸引数十万人热情参与。</p><p>–《豆瓣》</p></blockquote><p>这本书有一个很有意思的创意，也是很多西方文学中喜欢使用的手法，通过神话的手段来展示道理，让文章更加自然与流畅。会说话的小狗钱钱，相当于一个神的存在。通过这只小狗钱钱的讲述，把各种理财理论与心理知识灌输给主人公吉娅。并帮助吉娅打开了他的的理财大门。小狗钱钱这本书，我相信如果你认真读了它，并接受了它，它就是你生活是真实存在的小狗钱钱。</p><div align="center"> <img src="https://i.loli.net/2019/01/19/5c42d6f0db3df.jpg"width="400"/> </div><br><p>在整本书中，作者表达的观点，总结起来，其实就只有两点，第一个是如何达成自己的愿望，第二个是如何理财。</p><h2 id="三、-如何达成自己的愿望"><a href="#三、-如何达成自己的愿望" class="headerlink" title="三、 如何达成自己的愿望"></a>三、 如何达成自己的愿望</h2><p>主人公吉娅和大多数人一样，一开始有一个模糊的梦想，但对理财知识都是一无所知，在这种情况下，梦想也只能是梦想，看都看不清更别提实现它了。</p><p>小狗钱钱在书中的作用相当于一个资深的心灵和理财导师，在与吉娅发生过命的交情之后，开始帮助吉娅。奇迹从它阻止吉娅购买 CD 开始。整本书中关键时刻都是狗狗钱钱在开导着吉娅，让她一步步选择正确的道路。让我们看看小狗钱钱如何让吉娅达成自己的愿望。</p><ul><li><h4 id="列出一个自己想实现愿望的原因清单"><a href="#列出一个自己想实现愿望的原因清单" class="headerlink" title="列出一个自己想实现愿望的原因清单"></a>列出一个自己想实现愿望的原因清单</h4></li></ul><blockquote><p>为什么要把想做的事情列出来，书中小狗钱钱如此解释到，因为很多人如同吉娅一样，并不太清楚自己真正要的是什么，所以需要列出所有她想变富的理由。这样才可以让她更好的看清这个事情本身，知道自己最想要的是什么。</p></blockquote><ul><li><h4 id="在清单中筛选出几个最最关键的事情"><a href="#在清单中筛选出几个最最关键的事情" class="headerlink" title="在清单中筛选出几个最最关键的事情"></a>在清单中筛选出几个最最关键的事情</h4></li></ul><blockquote><p>如果不找出重点，就没有办法确切地知道自己的心里渴望的是什么，就没有努力的目标。如果目标不够坚定，一定完成不了自己的愿望的。</p></blockquote><ul><li><h4 id="不要只是试试看，而是直接行动起来"><a href="#不要只是试试看，而是直接行动起来" class="headerlink" title="不要只是试试看，而是直接行动起来"></a>不要只是试试看，而是直接行动起来</h4></li></ul><blockquote><p>我们有太多的时候，想做一个事情时需要考虑考虑，需要试试看。只有小孩子的世界才是最直接的，书中小狗钱钱就要求吉娅不要试试看。试试看意味着只是好奇，但真正付诸实现要比思考有用多了。并且做一件事的时候，不要超过 72 小时，因为过了 72 小时，你自己已经失去了最开始的好奇心，耐心也没了，基本上不会再完成这件事了，学会使用时间限制提醒自己提高效率。</p></blockquote><ul><li><h4 id="目标具体化，向着目标一步步走"><a href="#目标具体化，向着目标一步步走" class="headerlink" title="目标具体化，向着目标一步步走"></a>目标具体化，向着目标一步步走</h4></li></ul><blockquote><p>小狗钱钱使用了一个最简单的办法，使用梦想存储罐。多简单的方式。多具体的步骤。想要有钱，当然最重要的是存钱了，只有吉娅开始存第一块钱的时候，她才可能有变富的可能。如果只是想变富，她永远一块钱都没有。</p></blockquote><ul><li><h4 id="永不放弃"><a href="#永不放弃" class="headerlink" title="永不放弃"></a>永不放弃</h4></li></ul><blockquote><p>所谓万事开头难，一开始的阻力也是最大的，吉娅的爸爸与妈妈对存钱变富就嘲笑过吉娅。吉娅找不到挣钱的方法时灰心丧气想放弃，这些时候，小狗钱钱就是她最大的鼓励师。告诉她坚定目标的重要性，告诉她成功的案例，告诉她要学会面对困难，而且还要每天不间断地去做对自己未来有意义重大的事情。只要坚持不放弃，就可以变富，实现愿望。</p></blockquote><ul><li><h4 id="保持开放的心态，持续学习"><a href="#保持开放的心态，持续学习" class="headerlink" title="保持开放的心态，持续学习"></a>保持开放的心态，持续学习</h4></li></ul><blockquote><p>当小狗钱钱的原主人出现前，小狗钱钱扮演老师的角色，要求吉娅记成功笔记，每天记录自己学习到的内容，形成主动学习的习惯。</p><p>将自己所有做成功的事情记录进去，每天都坚持记录。当你记成功日记的时候，你会对自身、对世界以及对成功的规律做更深入的思考，你就会越来越多的了解自己的愿望，这会使你有能力去理解别人。</p><p>要彻底了解自己和世界上的所有秘密，这是无法实现的理想，但我们可以一步步接近这个理想。而在小狗钱钱原主人出现后，小狗钱钱的出场的次数在书中开始减少，出现少但不等作用变小，吉娅已经习惯了主动学习，主动和它的老主人学习，甚至还和陶穆太太学习投资，一步步加强自己的知识与眼界。最后变成实现了愿望。</p></blockquote><h2 id="四、如何理财"><a href="#四、如何理财" class="headerlink" title="四、如何理财"></a>四、如何理财</h2><p>小狗钱钱里最生动的理财故事，恐怕是杀鹅理论了，鹅就是我们的本金，金蛋就是利息，可以我们还没把鹅养大的时候，就把她给杀了。或者有时候自己根本都没有分清哪一个是鹅或者哪一个是蛋。</p><div align="center"> <img src="https://i.loli.net/2019/01/20/5c44906ee260e.png"width="500"/> </div><br><p>做为一本小白级别的入门理财书，书里面当然充满了很多通俗的理财的知识，以及怎么有效理财，这里梳理三点。</p><ul><li><h4 id="如何赚到自己人生的第一桶金"><a href="#如何赚到自己人生的第一桶金" class="headerlink" title="如何赚到自己人生的第一桶金"></a>如何赚到自己人生的第一桶金</h4></li></ul><blockquote><p>如何赚到自己人生的第一桶金，对于很多人来说，这个话题估计肯定很吸引，但似乎不容易。</p><p>而本书说利用小孩无所畏惧的心理，把赚取第一桶金的要素直接告诉了读者：做自己熟悉的事情，在自己熟悉的领域去赚取自己的人生第一桶金。</p><p>吉娅正是帮助邻居照顾狗狗拿破仑并训练狗狗几个动作，顺利得到了第一桶金20马克。人做自己熟悉且喜欢的事情就越容易有成就感，也越有赚钱的创意出现，从而可以赚到更多的钱。</p></blockquote><ul><li><h4 id="如何让自己的财富持续增长"><a href="#如何让自己的财富持续增长" class="headerlink" title="如何让自己的财富持续增长"></a>如何让自己的财富持续增长</h4></li></ul><p>书中使用了大量的故事来让吉娅学会怎么样才能让自己的财富增长，总结出以下几点：</p><blockquote><ul><li><strong>欠债的人应当毁掉所有的信用卡。因为大多数人在使用信用卡的时候比用现金花的钱要多得多；</strong></li><li><strong>尽可能少的偿还分期贷款。为了少偿还利息而选择高的分期付款额，这样每个月剩下的生活费就更少了；</strong></li><li><strong>将不用于基本生活的钱中的一半存起来，另一半用于还债；</strong></li><li><strong>借债前反问自己“这真的有必要吗”；</strong></li><li><strong>最主要的，就是要把 50% 的收入变成本金，40% 用来存储，剩下的 10% 用来消费，也就是5-4-1理论。</strong></li></ul></blockquote><ul><li><h4 id="如何投资"><a href="#如何投资" class="headerlink" title="如何投资"></a>如何投资</h4></li></ul><p>当财富开始增长的时候，就可以考虑到投资了。书中所说的投资是指把钱投在安全的地方，并让投资的钱在多个方面进行投资，同时投资也要简单明了。这对于小孩子或者保守型的人来说，是足够了。可以让自己的投资得到最大的回报，同时不用担心有所损失。</p><p>书中同样给出了如何投资基金的知识，挑选基金时的注意事项。</p><blockquote><ul><li><p><strong>这种基金已经动作了很长在段时间并且这么长时间一直有丰厚的利润。</strong></p></li><li><p><strong>应该选择大型的跨国股票基金。</strong></p></li><li><p><strong>重点选择过去10年间基金的年终利润最好的基金。</strong></p></li></ul></blockquote><p>当然了，书中还讲述了很多关于金钱的作用，以及如何看待金钱的问题。只有对金钱的本质了解清楚，才可以更好的理财。</p><p>最后，引用书的一句话。</p><blockquote><p><strong>有一些人读过之后不会有任何改变，而另一些人读过之后开始聪明地理财，他们会拥有更幸福更富有的生活。</strong></p></blockquote><p>如果有时间，推荐去读下这本书，也许不会立马让你赚到人生第一桶金，但书中的理念，相信会对你有所帮助。</p><br/><blockquote><ul><li>本文已收录至我的 GitHub 程序员成长系列【MoreThanCode】 ，欢迎 star：<a href="https://github.com/rongweihe/MoreThanCode" target="_blank" rel="noopener">https://github.com/rongweihe/MoreThanCode</a></li><li><strong>个人公众号</strong> ：herongwei，<strong>个人独立域名博客</strong>：herongwei.com，坚持原创输出，下方扫码关注，2020，与您共同成长！</li></ul></blockquote><div align="center"> <img src="https://i.loli.net/2020/04/11/GquzYyQ5loDCALM.png"width="500"/> </div><br><p>非常感谢各位能 <strong>看到这里</strong>，如果觉得本篇文章写得不错，觉得 <strong>「herongwei」是一个认真的仔</strong> 的话，<strong>求点赞，求关注，求分享，求留言哦！</strong></p><p>创作不易，各位的支持和认可，就是我创作的最大动力，我们下篇文章在见！</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/06/hello-world/"/>
      <url>/2020/04/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的 2018 总结</title>
      <link href="/2020/04/05/summary-of-2018/"/>
      <url>/2020/04/05/summary-of-2018/</url>
      
        <content type="html"><![CDATA[<p>2018 匆匆而过，2019 呼啸而至，简单复盘一下自己的 2018 年吧</p><p>整体来说，2018 年成长得还不够快，受打击的还不够多。</p><h2 id="一-学习"><a href="#一-学习" class="headerlink" title="一 学习"></a><strong>一 学习</strong></h2><ul><li>2018学年专业成绩第三</li><li>开题答辩成绩专业前十</li><li>每天背单词 25+ 坚持 489 天</li><li>极客 APP 报名学习了五个专栏课程</li><li>学堂在线 学完《数据挖掘理论与实战》</li><li>开通了两个知乎专栏，开始慢慢的输出自己平时学习的一些思考和总结。</li><li>GitHub 创建了 6 个重要的 repository，follower 18，新的一年，希望自己能多关注一些开源项目，贡献一些自己的力量。</li><li>重新打理了个人博客，以前在 CSDN 上写文章，后来慢慢总觉得没有个人博客写的自由，于是就基于 GitHub+Scribble 搭建了个人博客，目前写了有 45 篇文章。新的一年，希望自己能继续坚持下去。</li><li>重新打理自己的个人公众号，虽然粉丝不多，收到了开通公众号以来的第一笔读者的赞赏，真的非常开心，没有经营过公众号的人是体会不到那种感觉的，你会觉得那就是对你原创的一种鼓励，一种赞同，一种认可，另外，我的初心是把公众号当做自己一个写日结和总结的地方，有没有多少人关注现在我真的并不在意，你说你建议我去参加什么线下运营分享会之类的，我目前可能真的没有时间和精力，因为目前的我主要是把时间和精力放在个人成长方面，想把更多的时间和精力打磨自己的专长和感兴趣的地方，我一直相信，坚持自己的一些爱好，未来一定会有意想不到的收获，希望新的一年，自己能够坚持原创，坚持分享更多更好的干货。</li></ul><h2 id="二-健身"><a href="#二-健身" class="headerlink" title="二 健身"></a><strong>二 健身</strong></h2><ul><li>主要是户外运动，跑步，一到冬天，就变懒了呀，主要是室外太冷了有木有！</li><li>今年户外健身时间共 700 小时，跑步距离达 73.71 公里，明年争取突破 100 公里。</li><li>从 20 岁到今年，体重一直控制在 60-62 kg 之间，有人可能会因为懒，各种理由，对自己体重指数没有那么在意，那么我觉得，一个人连自己的身体状况都不在乎，都懒得在乎，他还能对别的事情有什么特别的在乎吗？有人可能反驳了，工作忙啊，抽不出时间来锻炼身体，那么我想问，难道要等到自己身体出现异常，发出警报不得已进医院才后悔莫及吗？，毕竟身体是革命的本钱，就算每天下班很晚，大部分人可能下班就开始休息了，但是我觉得哪怕每天抽出 至少 10 分钟慢跑消化消化肠胃总是可以的吧，时间，就像海绵里的水，都是挤出来的。</li></ul><h2 id="三-旅游"><a href="#三-旅游" class="headerlink" title="三 旅游"></a><strong>三 旅游</strong></h2><h4 id="人，为什么要旅游？"><a href="#人，为什么要旅游？" class="headerlink" title="人，为什么要旅游？"></a><strong>人，为什么要旅游？</strong></h4><p>旅行的第一个意义在于：它无疑可以帮助我们亲身感知很多东西，让我们变得成熟。</p><p>旅行的第二个意义在于：有助于消化通过读书学习间接获得的知识和信息。</p><p>旅行的第三个意义在于：它帮我们走出自己平时生活和工作的圈子。物理学中有一个知识：任何一个封闭的系统都是向着熵增大的方向发展的，也就是变得越来越无序。举个栗子就好理解，假如给一个普通人放假一个月，让他在房间里宅一个月，一个月之后你觉得房间是越来越乱了还是越来越整洁了？而破局的关键在于打破这个封闭的系统，引入所谓的“负熵”。中国有句古话，“他山之石可以攻玉”。就是这个道理。通过旅行，换一个环境，可以让我们重新审视自己，便于我们走出困境，走得更高，更远。</p><p>其实，历史上，很多大艺术家的灵感就来自于环境变换，看到自己以前没有想象的东西和事物。然后创作出不朽的作品。</p><p>虽然我们大部分人很难从旅行中获得想那些大艺术家那样的深刻的思想收获，但是旅行无疑慢慢改变了自己一些事情的看法和一些做事的方法。</p><p>没有旅行的生活是不完整的。</p><p>那么对于我今年的旅游地点，其实不多</p><p>国庆去了北戴河玩了两天。</p><p>12 中旬去南京玩了两天。</p><p>然后就没有了。。。</p><p>打脸的感觉~~</p><h2 id="四-项目"><a href="#四-项目" class="headerlink" title="四 项目"></a><strong>四 项目</strong></h2><p>项目：今年一共负责了三个跟专业相关的项目，其中两个是临时项目，从需求确认到确定技术路线，到最后开发完成验收完毕，均在一个月左右完成。<br>另外一个项目跟进了一年多，终于在今年的 11 月初验收汇报完毕了，项目结项。</p><p>个人从项目中学到了很多知识，总的感受是，不能光学理论知识，忽略了实践的重要性，还是要结合具体项目，带着目标驱动性的学习，这样学习可能会快一点。</p><h2 id="五-复盘"><a href="#五-复盘" class="headerlink" title="五 复盘"></a><strong>五 复盘</strong></h2><h4 id="关于选择还是坚持？"><a href="#关于选择还是坚持？" class="headerlink" title="关于选择还是坚持？"></a><strong>关于选择还是坚持？</strong></h4><p>有人问，觉得自己二十多岁，一无所有，该怎么办？</p><p>我不妨建议 <strong>你从做一件小事做起，坚持一年。</strong>别想着有什么爆发的结果，单纯的坚持一年试试</p><p>那有人可能问了：坚持不下去，怎么办？</p><p>心理学说：坚持不下去，无非是两个原因：</p><p><strong>你没找到坚持这件事的乐趣，或者，你没有坚持到养成一种习惯。</strong></p><p>就比如阅读，但凡坚持阅读的人，要么会觉得阅读是有趣的，要么不拿起书就总觉得不舒服。</p><p>再比如锻炼，但凡坚持锻炼的人，要么觉得锻炼后神清气爽，要么今天不锻炼觉得生活少了点什么。</p><p>巧了，上面这两个我都很有体会。</p><p>我们都知道一万小时理论，意思就是，不管你做什么领域，从事什么行业，只要你能坚持学习 1w 小时，那么你肯定能成为行业专家。听起来很简单，只要坚持就行了，但是坚持恰恰是最难的，绝大部分人是没有这样的意志力的。</p><p>坚持其实跟自己的<strong>「意志力」</strong>直接相关的，很多人总觉得自己的意志力很薄弱，无法控制自己，然而实际上，我们对意志力的理解是狭隘的。</p><p>意志力分为两种，<strong>一种是内在的</strong>，即我们常规理解的，包括自控、自律，要做什么，不要做什么等等，<strong>另一种是外在的</strong>，这与我们所处的环境，所接触的人、事物等有关。</p><p>我这里想告诉大家的是如何更好的提升自己的<strong>内在意志力</strong>，那么建议可以先从身边可以做成的小事「刻意训练」做起，这就是我为什么坚持每天背单词，当然，背单词很重要，更重要的是背单词这件事本身，它就像一个小小的成就感在那里，无时不刻在潜意识里提醒自己是能把一件小事坚持下去的。坚持每天跑步，坚持每天读一篇文章，坚持每周健身等等等，当你把一件小事坚持下去的时候，你的意志力就已经得到了提升，并且逐渐提升自己的难度，每完成一件事，你的成就感会上升，你的意志力会逐渐强大，以后做任何事，你都会更好的坚持下去。</p><p>看吧，坚持任何一件事无非是两个原因：<strong>要么找到坚持的乐趣，或者咬紧牙把这件事养成习惯</strong>。</p><p>为什么人和人的差别这么大？</p><p>其实答案只有一个：<strong>一些人坚持做了点什么，一些人因为什么事情放弃了。</strong></p><p><strong>放弃的理由五花八门，但坚持却只有这么两个理由。</strong></p><p>这世界上几乎所有的美好，都来源于坚持。</p><p>因此，<strong>坚持比选择要重要得多。</strong> </p><p>你坚持爱一个姑娘，她或许就是你的妻子。</p><p>你坚持做一件事，它或许就是你的事业。</p><p>有人说，三十多岁，选择才开始重要，到了四十多岁，人才逐渐有了做选择的智慧。</p><p>当然，这都是建立于“贵在坚持”之上。</p><h3 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a><strong>关于未来</strong></h3><ul><li>职场前 5 年尽可能选择发展快速，行业的领头羊。</li><li>在任何时候，投资自己永远是投资收益比最高的。</li><li>天才只是少数，普通人靠着持之以恒的努力，同样可以成为领域里的专家，但大部分人连努力都坚持不下去。</li><li>创业心态面对工作。</li></ul><h3 id="个人认知"><a href="#个人认知" class="headerlink" title="个人认知"></a><strong>个人认知</strong></h3><p>2018 年，个人认知有了新的提高，加入了一些不错的付费圈子，比如帅张的知识星球。</p><p>每周至少一次长文分享，主题包括技术，职场，学习方法，商业，投资，写作，管理等方面，不仅增长见识，而且还改变了我们的思维方式。</p><p>感兴趣的，可以加入看看，投资自己永远是最大的投资！</p><div align="center"> <img src="https://i.loli.net/2020/04/06/XHtVCeJ5zb8mWoM.png "width="300"/> </div><br><h3 id="最后是-2019-年学习计划"><a href="#最后是-2019-年学习计划" class="headerlink" title="最后是 2019 年学习计划"></a><strong>最后是 2019 年学习计划</strong></h3><ul><li>学完《Unix 网络编程》（卷一套接字编程 + 卷二进程控制），并且写笔记发博客，一周至少一篇</li><li>坚持每周 ARTS </li><li>微信公众号坚持每周至少两篇文章</li><li>坚持每天记录自己所学所得</li><li>新的一年，加油吧！骚年！</li></ul><br/><br/><br/><center>公众号：herongwei </center><div align="center"> <img src="https://i.loli.net/2020/04/06/SBXI8QwrDyANjbg.jpg "width="250"/> </div><br><p>原文写于： 12/31/2018</p><p>最后更新于：04/06/2020</p><p>By@herongwei</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
